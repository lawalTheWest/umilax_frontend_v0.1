name: EAS Build (production) - Android Only

on:
  workflow_dispatch: {}
  push:
    branches:
      - main
      - dev

env:
  POLL_ATTEMPTS: 60
  POLL_SLEEP_SECONDS: 20

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 120

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Debug environment (safe)
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
        run: |
          set -euxo pipefail
          echo "Runner uname:" && uname -a
          echo "Node version:" && node --version || true
          echo "npm version:" && npm --version || true
          echo "Git ref: ${GITHUB_REF}"
          # Do NOT print secrets. Only indicate presence/absence.
          if [ -z "${EXPO_TOKEN:-}" ]; then
            echo "EXPO_TOKEN: MISSING"
          else
            echo "EXPO_TOKEN: PRESENT"
          fi

      - name: Install dependencies (repo root)
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
        run: |
          set -euxo pipefail
          echo "npm version:" && npm --version
          echo "Using npm install --legacy-peer-deps to avoid lockfile npm-version issues"
          npm install --legacy-peer-deps

      - name: Install pinned EAS CLI (16.20.1) and jq
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
        run: |
          set -euxo pipefail
          # Pin the CLI to match local environment and avoid behavior drift
          npm install -g eas-cli@16.20.1 --legacy-peer-deps
          sudo apt-get update
          sudo apt-get install -y jq
          echo "EAS CLI version:" && eas --version

      - name: Run EAS build (Android only), wait for completion, fetch artifact, and publish to GitHub Release
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euxo pipefail
          echo "Authenticated as:" && eas whoami

          echo "Starting EAS build for Android only (non-interactive, wait for completion)..."

          # Start the build and wait for EAS to finish. --wait streams progress and returns final JSON.
          build_output=$(eas build --platform android --profile production --non-interactive --wait --json 2>&1 || true)

          # Print tail of output for visibility (don't dump full logs)
          echo "Build output (tail):"
          echo "$build_output" | tail -n 200 || true

          # Try to extract the final JSON payload from output. EAS sometimes prints a JSON array
          # or additional log lines. We'll extract the first JSON object that contains an "id" field.
          # Strategy:
          #  - Prefer any complete JSON object lines
          #  - If output is a JSON array, try to parse it and take the first element with an id
          #  - As a last resort, grep for the first substring that looks like a JSON object with "id"

          raw_json_lines=$(echo "$build_output" | sed -n '1,\$p')

          # 1) If output is a pure JSON array/object, try parsing whole output with jq
          if echo "$raw_json_lines" | jq -e '.' >/dev/null 2>&1; then
            # valid JSON (array or object)
            if echo "$raw_json_lines" | jq -e 'type=="array"' >/dev/null 2>&1; then
              # take the first element that has an id
              json_candidate=$(echo "$raw_json_lines" | jq -c '.[] | select(.id) | . ' | head -n1 || true)
            else
              # object
              json_candidate=$(echo "$raw_json_lines" | jq -c '. | select(.id)') || true
            fi
          fi

          # 2) If json_candidate empty, try to extract any JSON object-like substring that contains "\"id\""
          if [ -z "${json_candidate:-}" ]; then
            # Grep for likely JSON object lines containing "id" and pick first
            json_candidate=$(echo "$build_output" | grep -o '{[^}]*"id"[^}]*}' | head -n1 || true)
          fi

          # 3) Fail if still empty
          if [ -z "${json_candidate:-}" ]; then
            echo "ERROR: Could not locate JSON object in eas build output" >&2
            echo "Raw output (tail 400 lines):" >&2
            echo "$build_output" | tail -n 400 >&2
            exit 1
          fi

          # Validate the extracted candidate is valid JSON
          if ! echo "$json_candidate" | jq -e '.' >/dev/null 2>&1; then
            echo "ERROR: Extracted JSON is invalid" >&2
            echo "$json_candidate" >&2
            exit 1
          fi

          build_json="$json_candidate"

          BUILD_ID=$(echo "$build_json" | jq -r '.id // empty')
          ARTIFACT_URL=$(echo "$build_json" | jq -r '(.artifacts.buildUrl // .artifacts[]?.url // .artifacts.applicationArchiveUrl // empty) | select(. != null and . != "")' | head -n1)

          if [ -z "$BUILD_ID" ]; then
            echo "ERROR: Could not determine build id from build JSON" >&2
            echo "$build_json" | jq '.' >&2
            exit 1
          fi

          echo "Build completed: $BUILD_ID"
          echo "Build URL: https://expo.dev/accounts/$(eas whoami 2>/dev/null || echo 'unknown')/builds/$BUILD_ID"

          if [ -z "$ARTIFACT_URL" ] || [ "$ARTIFACT_URL" = "null" ]; then
            echo "ERROR: Build finished but no artifact URL found" >&2
            echo "$build_json" | jq '.' >&2
            exit 1
          fi

          echo "Found artifact URL: $ARTIFACT_URL"

          mkdir -p build_artifacts
          timestamp=$(date +%Y%m%d-%H%M%S)
          filename="app-android-${timestamp}-${BUILD_ID:0:8}.apk"

          echo "Downloading artifact to build_artifacts/$filename..."
          curl -L --fail --retry 3 --retry-delay 5 "$ARTIFACT_URL" -o "build_artifacts/$filename"

          if [ ! -f "build_artifacts/$filename" ] || [ ! -s "build_artifacts/$filename" ]; then
            echo "ERROR: Download failed or file empty" >&2
            exit 1
          fi

          file_size=$(stat -f%z "build_artifacts/$filename" 2>/dev/null || stat -c%s "build_artifacts/$filename" 2>/dev/null || echo "unknown")
          echo "Downloaded APK size: $file_size bytes"

          echo "Creating GitHub release..."
          tag="android-build-${{ github.run_id }}"
          name="Android Build #${{ github.run_number }}"
          body="**Android APK from EAS Build**%0A%0A- Build ID: \`$BUILD_ID\`%0A- Commit: \`${{ github.sha }}\`%0A- Branch: \`${{ github.ref_name }}\`%0A- Timestamp: \`$timestamp\`%0A- File: \`$filename\`"

          release_response=$(curl -s -X POST \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/${{ github.repository }}/releases" \
            -d "{\"tag_name\": \"$tag\", \"name\": \"$name\", \"body\": \"$body\", \"draft\": false, \"prerelease\": false}")

          upload_url=$(echo "$release_response" | jq -r '.upload_url | select(. != null)' | sed -e 's/{?name,label}//')

          if [ -z "$upload_url" ] || [ "$upload_url" = "null" ]; then
            echo "ERROR: Could not create GitHub release" >&2
            echo "$release_response" | jq '.' >&2
            exit 1
          fi

          echo "Uploading APK to release..."
          upload_response=$(curl -s --fail-with-body -X POST \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Content-Type: application/vnd.android.package-archive" \
            --data-binary @"build_artifacts/$filename" \
            "$upload_url?name=$filename" 2>&1 || true)

          if echo "$upload_response" | jq -e '.browser_download_url' >/dev/null 2>&1; then
            download_url=$(echo "$upload_response" | jq -r '.browser_download_url')
            echo "âœ… Upload complete!"
            echo "ðŸ“¦ APK: $download_url"
            echo "ðŸ”— Release: https://github.com/${{ github.repository }}/releases/tag/$tag"
          else
            echo "ERROR: Failed to upload APK to release" >&2
            echo "$upload_response" >&2
            exit 1
          fi
